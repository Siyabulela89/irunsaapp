@page "/AthReg/{ismine}"
@using Newtonsoft.Json;
@using System.Security.Claims;
@using irunsaapp.Models
@using irunsaapp.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
﻿@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IAuthService AuthService
@inject HttpClient httpClient


@inject IEntityType EntityType
@inject NavigationManager NavigationManager

<MudPaper Elevation="3" Height="150" Class="px-4 mx-n4 mt-n10 pt-10 mud-theme-primary" Style="border-radius: 0px 0px 45px 45px;" Outlined="false">
    <MudPaper Elevation="0" Class="py-6" Style="background-color: transparent">

    </MudPaper>
</MudPaper>

<MudGrid Class="mt-n15 pt-0">
    <MudItem xs="12">


        <EditForm Model="athleteEntity" OnValidSubmit="HandleAthleteReg">
            <MudCard Elevation="1" Class="rounded-lg py-1">
                <MudCardContent>
                    <MudText Color="Color.Default" Typo="Typo.h6" Style="font-weight: 600;">Sign Up</MudText>
                    <MudText Class="mb-5" Typo="Typo.body2">Let's go</MudText>

                    @if (ShowErrors)
                    {
                        <div class="alert alert-danger" role="alert">
                            @foreach (var error in Errors!)
                            {
                                <p>@error</p>
                            }
                        </div>
                    }

                    <MudGrid>
                     
                        <MudItem xs="6">
                            <MudAvatar Style="height:70px; width:70px; font-size:2rem;">
                                <MudImage Src="@imageDataUrl"></MudImage>
                            </MudAvatar>
                    
                     
                        </MudItem>
                        <MudItem xs="6" >
                            <MudFileUpload Context="file" FilesChanged="OnFileSelected" T="IBrowserFile">
                                <ButtonTemplate>
                                    <MudIconButton HtmlTag="label"
                                                  
                                                   Color="Color.Info"
                                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                                   for="@file">
                                    </MudIconButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        </MudItem>
                     
                    </MudGrid>
                    <MudAlert class="@invisi" Severity="Severity.Error">@errorMessage</MudAlert>
       
                 
                    <MudTextField T="string" Label="Name" Id="Name" Disabled="@cantedit" @bind-Value="athleteEntity.AthleteName" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" />
                    <ValidationMessage For="@(() => athleteEntity.AthleteName)" />
                    <MudTextField T="string" Label="Surname" Id="Surname" @bind-Value="athleteEntity.AthleteSurname" Disabled="@cantedit" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" />
                    <ValidationMessage For="@(() => athleteEntity.AthleteSurname)" />

                    <MudTextField DebounceInterval="1" OnDebounceIntervalElapsed="HandleIntervalElapsed" @bind-Value="selectedcountryname" HelperText="@searchTerm" Label="Country of nationality" Variant="Variant.Outlined" Adornment="Adornment.End" />
                    
                    @if (searchResults != null)
                    {
                        <MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
                          
                            <tbody>
                                @if (searchResults.Any())
                                {
                                @foreach (var country in searchResults)
                                {
                                  
                                        <tr @onclick=@(_ => SelectCountry(country.CountryID,country.CountryName))>

                                            <td style="text-align:left">@($"{country.CountryName}")</td>
                                            <td style="text-align:right"> <img width="30" src="@($"Countries/{country.Shortcodeflag}")" alt="Country Flag" /></td>

                                        </tr>
                                  

                            }
                                }
                                else

                                {
                                    <MudAlert Severity="Severity.Error">Invalid Country please retype</MudAlert>
                                }
                            </tbody>
                        </MudSimpleTable>
                      
                    }

              
                    
                    <MudTextField T="string" Label="ID/Passport" Id="IDPssport" @bind-Value="athleteEntity.ID_Passport" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" />
                    <ValidationMessage For="@(() => athleteEntity.ID_Passport)" />
                    <MudDatePicker Label="Date of Birth" Editable="true" @bind-Date="athleteEntity.DOB"  Placeholder="Select Date" />
              
                    <ValidationMessage For="@(() => athleteEntity.DOB)" />


                    <MudRadioGroup T="int" @bind-SelectedOption="athleteEntity.GenderId" Class="d-flex flex-column">
                            <MudRadio Option="1"  Color="Color.Primary">Male</MudRadio>
                        <MudRadio Option="2" Color="Color.Secondary">Female</MudRadio>

                        </MudRadioGroup>

                               <MudTextField DebounceInterval="1" OnDebounceIntervalElapsed="HandleIntervalElapsed2" @bind-Value="selectedclubname" HelperText="@searchTerm2" Label="Associated Club" Variant="Variant.Outlined" Adornment="Adornment.End" />
                    
                    @if (searchResults2 != null)
                    {
                        <MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">

                            <tbody>
                                @if (searchResults2.Any())
                                {
                                    @foreach (var club in searchResults2)
                                    {

                                        <tr @onclick=@(_ => SelectClub(club.ClubId,club.ClubDescription))>

                                            <td style="text-align:left">@($"{club.ClubDescription}")</td>
                                            

                                        </tr>
                                    }

                                }
                                else

                                {
                                  
                                }
                            </tbody>
                        </MudSimpleTable>
                      }

                    <MudTextField T="string" Label="Email" Id="Email" @bind-Value="athleteEntity.Email" Disabled="@cantedit" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" />
                    <ValidationMessage For="@(() => athleteEntity.ID_Passport)" />

                
                    
                    <MudButton Class="my-4 py-2 rounded-lg" ButtonType="ButtonType.Submit" Color="Color.Tertiary" FullWidth="true" Variant="Variant.Filled">Create Account</MudButton>
@* 
                    <div class="d-flex justify-center my-5">
                        <MudLink Href="/pages/sign-in" Typo="Typo.body2">Already Registered? Sign in</MudLink>
                    </div>

                    <MudButton Class="my-1 py-2 rounded-lg" Color="Color.Primary" DisableElevation FullWidth="true" StartIcon="fab fa-facebook" Variant="Variant.Filled">Register with Facebook</MudButton>
                    <MudButton Class="my-1 py-2 rounded-lg" Color="Color.Error" DisableElevation FullWidth="true" StartIcon="fab fa-google" Variant="Variant.Filled">Register with Google</MudButton>
                    <MudButton Class="my-1 py-2 rounded-lg" Color="Color.Default" DisableElevation FullWidth="true" StartIcon="fab fa-apple" Variant="Variant.Filled">Register with Apple</MudButton> *@
                    </MudCardContent>
                    </MudCard>
                    </EditForm>
                    </MudItem>
                    </MudGrid>

@code {
    private AthleteEntity athleteEntity = new AthleteEntity();
    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    private string searchTerm;
    private string searchTerm2;
    private List<Country> searchResults;
    private List<Club> searchResults2;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    int? selectedcountryid;
    string? selectedcountryname;
    int? selectedclubid;
    string? selectedclubname;
    public DateTime? DOB { get; set; }
    DateTime? date = DateTime.Today;
    [Parameter]
    public string ismine { get; set; }
    bool cantedit;
    string invisi ="invisible";
    string errorMessage;

  
    private IBrowserFile selectedFile;
    private string imageDataUrl;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async void OnFileSelected(IBrowserFile file)
    { 
        invisi = "invisible";
        if (file != null)
        {
            // Define the maximum allowed size in bytes
            long maxAllowedSizeBytes = 1024 * 50000;  // 5 MB

            if (file.Size > maxAllowedSizeBytes)
            {
                errorMessage = "File size exceeds the maximum allowed size.";
                invisi = "";
                return;
            }

            // Check allowed file extensions (case-insensitive)
            string[] allowedExtensions = { ".jpeg", ".jpg", ".bmp", ".png", ".gif", ".tiff" };
            string fileExtension = Path.GetExtension(file.Name).ToLower();
            if (!allowedExtensions.Any(ext => ext.Equals(fileExtension, StringComparison.OrdinalIgnoreCase)))
            {
              
                errorMessage = "Only JPEG, BMP, PNG, GIF, and TIFF file types are allowed.";
                invisi = "";
                return;
            }
        
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSizeBytes).ReadAsync(buffer);
            var imageBase64 = Convert.ToBase64String(buffer);
            imageDataUrl = $"data:{file.ContentType};base64,{imageBase64}";
            StateHasChanged(); // Update the UI
        }
    }

  
    private async Task PrepopulateFormFromClaims()
    {
        if (ismine == "yes")
        {
            cantedit = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;


            if (user.Identity.IsAuthenticated)
            {
                athleteEntity.Email = user.FindFirst(ClaimTypes.Email)?.Value;
                athleteEntity.AthleteName = user.FindFirst(ClaimTypes.Name)?.Value;
                athleteEntity.AthleteSurname = user.FindFirst(ClaimTypes.Surname)?.Value;
            }
        }
        else

        {
            cantedit = false;
            
        }
    }

      


    // This gets called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
       

        await PrepopulateFormFromClaims();
        await base.OnInitializedAsync();
    }

    void HandleIntervalElapsed2(string debouncedText)
    {


        // Call your search function here and update searchResults
        searchResults2 = Search2(debouncedText);
        // at this stage, interval has elapsed
    }
    private List<Club> Search2(string value)
    {
        var responseTask = httpClient.GetStringAsync($"api/Club/AutoComplete/{value}");
        responseTask.Wait(); // Blocking call, which should be used with caution

        if (responseTask.IsCompletedSuccessfully)
        {
            var response = responseTask.Result;
            return JsonConvert.DeserializeObject<List<Club>>(response);
        }
        else
        {
            throw new Exception("Failed to get response.");
        }
    }

    void SelectClub(int id, string country)
    {
        selectedclubid = id;
        selectedclubname = country;
        searchResults2 = null;
    }
    
    void HandleIntervalElapsed(string debouncedText)
    {


        // Call your search function here and update searchResults
        searchResults = Search(debouncedText);
        // at this stage, interval has elapsed
    }
    private List<Country> Search(string value)
    {
        var responseTask = httpClient.GetStringAsync($"api/Country/Autocomplete/{value}");
        responseTask.Wait(); // Blocking call, which should be used with caution

        if (responseTask.IsCompletedSuccessfully)
        {
            var response = responseTask.Result;
            return JsonConvert.DeserializeObject<List<Country>>(response);
        }
        else
        {
            throw new Exception("Failed to get response.");
        }
    }

    void SelectCountry(int id, string country)
    {
        selectedcountryid = id;
        selectedcountryname = country;
        searchResults = null;
    }
 

    private async Task HandleAthleteReg()
    {
        ShowErrors = false;

        // Implement your registration logic here
        // For now, let's just display the submitted athleteEntity data
        Console.WriteLine("Registration submitted with the following data:");
        Console.WriteLine($"ID/Passport: {athleteEntity.ID_Passport}");
        Console.WriteLine($"Nationality ID: {athleteEntity.NationalityID}");
        Console.WriteLine($"Gender ID: {athleteEntity.GenderId}");
        Console.WriteLine($"Date of Birth: {athleteEntity.DOB}");
        Console.WriteLine($"Club Entity ID: {athleteEntity.ClubEntityId}");
        Console.WriteLine($"Email: {athleteEntity.Email}");
        // ... Include other fields
    }
}

