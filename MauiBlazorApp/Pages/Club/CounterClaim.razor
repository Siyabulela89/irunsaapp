@page "/pages/Club/CounterClaim/{clubEntityJson}"

@using System.Text;
@using irunsaapp.Common;
@using irunsaapp.Models;
@using irunsaapp.Pages.Actions;
@using irunsaapp.Pages.Components
@using irunsaapp.Services;
@using System.Net.Http.Json
@using Newtonsoft.Json;

@inject HttpClient httpClient
@inject IEntityType EntityTypeService
@inject NavigationManager NavigationManager

<MudPaper Elevation="3" Height="150" Class="px-4 mx-n4 mt-n10 pt-10 mud-theme-primary" Style="border-radius: 0px 0px 45px 45px;" Outlined="false">
    <MudPaper Elevation="0" Class="py-6" Style="background-color: transparent">

    </MudPaper>
</MudPaper>

<MudGrid Class="mt-n15 pt-0">
    <MudItem xs="12">
        <EditForm Model="clubEntity" OnValidSubmit="SubmitClaim">

        <MudCard Elevation="1" Class="rounded-lg py-1">
            <MudCardContent>

                @if (ShowErrors)
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in Errors!)
                        {
                            <p>@error</p>
                        }
                    </div>
                }

                <div>

                    <MudTextField Class="mt-3" T="string" Label="Club Name" Id="ClubName" @bind-Value="clubEntity.ClubName" Variant="Variant.Filled" Margin="Margin.Dense"
                                    AdornmentColor="Color.Primary" Adornment="Adornment.Start" AdornmentIcon="@Icons.TwoTone.AccountCircle" />
                    <ValidationMessage For="@(() => clubEntity.ClubName)" />

                    <MudTextField Class="mt-3" T="string" Label="Club Registration Number" Id="ClubRegistrationNumber" @bind-Value="clubEntity.ClubRegistrationNumber" Variant="Variant.Filled" Margin="Margin.Dense"
                                    AdornmentColor="Color.Primary" Adornment="Adornment.Start" AdornmentIcon="@Icons.TwoTone.AccountCircle" />
                    <ValidationMessage For="@(() => clubEntity.ClubRegistrationNumber)" />
                        

                    <div class="mt-5 d-flex flex-grow-1 gap-4">
                        <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Success" Variant="Variant.Filled" OnClick="SubmitClaim">Submit Claim</MudButton>
                        <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Error" Variant="Variant.Filled" OnClick="CancelClaim">Back to Club Search</MudButton>
                    </div>
                </div>     
            </MudCardContent>
        </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>


 @code {

    [Parameter]
    public string clubEntityJson { get; set; }

    private ClubEntity clubEntity = new ClubEntity();


    private int entityTypeId;

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    public string searchTerm;

    string bindValue;

    protected override void OnInitialized()
    {
        // Deserialize the JSON string back to ClubEntity
        clubEntity = JsonConvert.DeserializeObject<ClubEntity>(Uri.UnescapeDataString(clubEntityJson));
        
        entityTypeId = (int)Enums.EntityType.Club;

        //Get User contact details, complete details mandatory
    }

    private async Task SubmitClaim()
    {       
        UserEntityRelationship userEntityRelationship = new UserEntityRelationship()
        {
            UserId = "1",//get user details
            EntityTypeID = entityTypeId,
            EntityId = clubEntity.ClubEntityId,
            RoleTypeId = (int)Enums.RoleType.OwnerPendingVerification
        };

        var result = "";

        result = await EntityTypeService.AddUserEntityRelationship(userEntityRelationship);

        #region error handling section
        if (result == "")
        {
            var options = new DialogOptions() { CloseButton = false, NoHeader = true, MaxWidth = MaxWidth.Large, Position = DialogPosition.BottomCenter };
            var parameters = new DialogParameters();
            var dialog = _dialogService.Show<SuccessBox>("", parameters, options);
        }
        else
        {
            //Errors = "";
            ShowErrors = true;
            _processing = false;
        }
        #endregion 
    }

    private void CancelClaim()
    {
        //Redirect to back to Club Search
        NavigationManager.NavigateTo("/pages/Club/ClubSearch");
    }

    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private bool _processing = false;
    async Task ProcessSomething()
    {
        _processing = true;       
    }
}