@page "/pages/Club/ClubSearch"

@using System.Text;
@using irunsaapp.Common;
@using irunsaapp.Models;
@using irunsaapp.Pages.Actions;
@using irunsaapp.Pages.Components
@using irunsaapp.Services;
@using System.Net.Http.Json
@using Newtonsoft.Json;

@inject HttpClient httpClient
@inject IEntityType EntityTypeService
@inject NavigationManager NavigationManager

<MudPaper Elevation="3" Height="150" Class="px-4 mx-n4 mt-n10 pt-10 mud-theme-primary" Style="border-radius: 0px 0px 45px 45px;" Outlined="false">
    <MudPaper Elevation="0" Class="py-6" Style="background-color: transparent">

    </MudPaper>
</MudPaper>

<MudGrid Class="mt-n15 pt-0">
    <MudItem xs="12">
        <EditForm Model="clubEntity" OnValidSubmit="SubmitClaim">

        <MudCard Elevation="1" Class="rounded-lg py-1">
            <MudCardContent>
                @*
                <MudText Color="Color.Default" Typo="Typo.h6" Style="font-weight: 600;">Sign Up</MudText>
                <MudText Class="mb-5" Typo="Typo.body2">Get started in minutes</MudText> 
                *@

                @if (ShowErrors)
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in Errors!)
                        {
                            <p>@error</p>
                        }
                    </div>
                }
                
                @if (ShowSearchField)
                {
                <MudTextField DebounceInterval="1" OnDebounceIntervalElapsed="SearchClub" @bind-Value="bindValue" HelperText="@searchTerm" Label="Search Club Name" Variant="Variant.Outlined" Adornment="Adornment.End" />
                }

                @if (clubSearchList.Any())
                {
                    <MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">

                    <tbody>
                        @foreach (var item in clubSearchList)
                        {
                            <tr @onclick=@(_ => SelectClub(item))>
                                        <td style="text-align:left">@($"{item.ClubName}")</td>
                                @*
                                    <td style="text-align:right"> <img width="30" src="@($"Countries/{club.Shortcodeflag}")" alt="Country Flag" /></td>
                                *@
                            </tr>
                        }

                    </tbody>

                    </MudSimpleTable>
                }
                else if (!clubSearchList.Any())
                {
                    @if (ShowClaimConfirmation)
                    {
                        @if (clubEntity.ClubStatusId == (int)Enums.ClubStatus.ClaimRequested)//ClaimRequested //add enum
                        {
                        <MudAlert Severity="Severity.Error">This club has already been claimed, would you like to send a counter claim request?</MudAlert>
                        <div class="mt-5 d-flex flex-grow-1 gap-4">
                            <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Success" Variant="Variant.Filled" OnClick="ClaimYes">Send reclaim</MudButton>
                            <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Error" Variant="Variant.Filled" OnClick="ClaimNo">Cancel</MudButton>
                        </div>
                        }
                        else
                        {
                        <MudAlert Severity="Severity.Error">Would you like to claim the club?</MudAlert>
                        <div class="mt-5 d-flex flex-grow-1 gap-4">
                            <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Success" Variant="Variant.Filled" OnClick="ClaimYes">Claim</MudButton>
                            <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Error" Variant="Variant.Filled" OnClick="ClaimNo">Cancel</MudButton>
                        </div>
                        }                        
                    }

                    @if (ShowAddClubConfirmation)
                    {
                        <MudAlert Severity="Severity.Error">Club name not found in pre-polulated list. Would you like to add a new club?</MudAlert>
                        <div class="mt-5 d-flex flex-grow-1 gap-4">
                            <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Success" Variant="Variant.Filled" OnClick="AddClubYes">Yes</MudButton>
                            <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Error" Variant="Variant.Filled" OnClick="AddClubNo">No</MudButton>
                        </div>
                    }
                }
          
            </MudCardContent>
        </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>


@code {

    private ClubEntity clubEntity = new ClubEntity();
    private ClubEntity currentClubEntity = new ClubEntity();
    private List<ClubEntity> clubEntityList = new List<ClubEntity>();
    private List<ClubEntity> clubSearchList = new List<ClubEntity>();


    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;


    private bool ShowClaimConfirmation = false;
    private bool ShowAddClubConfirmation = false;
    private bool ShowSearchField = true;
    private bool ShowClubEntityForm = false;

    private int entityTypeId = (int)Enums.EntityType.Club;
    public string searchTerm;

    string bindValue;

    protected override void OnInitialized()
    {
        // Load clubList here
        GetAllClubs();

    }

    private void GetAllClubs()
    {
        //clubEntityList = await EntityTypeService.SearchClubs(debouncedText);

        var responseTask = httpClient.GetStringAsync($"api/ClubEntity/GetAll");
        responseTask.Wait(); // Blocking call, which should be used with caution

        if (responseTask.IsCompletedSuccessfully)
        {
            var response = responseTask.Result;

            clubEntityList = JsonConvert.DeserializeObject<List<ClubEntity>>(response);
        }
    }

    private void SearchClub(string debouncedText)
    {
        if (!string.IsNullOrEmpty(debouncedText))
        {
            clubSearchList = clubEntityList.Where(x => x.ClubName.ToLower().Contains(debouncedText.ToLower())).ToList();

            if (clubSearchList.Any())
            {
                ShowClaimConfirmation = false;
                ShowAddClubConfirmation = false;
                ShowClubEntityForm = false;
            }
            else
            {
                ShowClaimConfirmation = false;
                ShowAddClubConfirmation = true;
                ShowClubEntityForm = false;

                clubEntity.ClubName = bindValue;
                currentClubEntity = clubEntity;
                clubSearchList.Clear();
            }
        }
        else
        {
            clubSearchList.Clear();
        }
    }
    private void SelectClub(ClubEntity selectedClubEntity)
    {
        clubEntity = selectedClubEntity;
        // selectedClubEntityId = clubEntity.ClubEntityId;
        // selectedClubName = clubEntity.ClubName;
        // selectedClubStatusId = clubEntity.ClubStatusId;

        ShowClaimConfirmation = true;
        ShowAddClubConfirmation = false;
        ShowClubEntityForm = false;
        ShowSearchField = false;

        clubSearchList.Clear();
    }

    private void ClaimYes()
    {
        currentClubEntity.ClubName = clubEntity.ClubName;

        ShowClaimConfirmation = false;
        ShowAddClubConfirmation = false;
        ShowClubEntityForm = true;
        ShowSearchField = false;
    }
    private void ClaimNo()    
    {
        currentClubEntity = null;

        ShowClaimConfirmation = false;
        ShowAddClubConfirmation = false;
        ShowClubEntityForm = false;
        ShowSearchField = true;


    }
    private void AddClubYes()
    {
        currentClubEntity = clubEntity;

        currentClubEntity.ClubEntityId = 0;
        currentClubEntity.ClubName = clubEntity.ClubName;
        currentClubEntity.ClubRegistrationNumber = clubEntity.ClubRegistrationNumber;
        currentClubEntity.ClubStatusId = (int)Enums.ClubStatus.ClaimRequested;

        ShowClaimConfirmation = false;
        ShowAddClubConfirmation = false;
        ShowClubEntityForm = true;
        ShowSearchField = false;
    }
    private void AddClubNo()
    {
        currentClubEntity = null;

        ShowClaimConfirmation = false;
        ShowAddClubConfirmation = false;
        ShowClubEntityForm = false;
        ShowSearchField = true;
    }

    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private bool _processing = false;
    async Task ProcessSomething()
    {
        _processing = true;       
    }
}