@page "/pages/Club/ClubEntityAddEdit/{clubEntityJson}"

@using System.Text;
@using irunsaapp.Common;
@using irunsaapp.Models;
@using irunsaapp.Pages.Actions;
@using irunsaapp.Pages.Components
@using irunsaapp.Services;
@using System.Net.Http.Json
@using Newtonsoft.Json;

@inject HttpClient httpClient
@inject IEntityType EntityTypeService
@inject NavigationManager NavigationManager

<MudPaper Elevation="3" Height="150" Class="px-4 mx-n4 mt-n10 pt-10 mud-theme-primary" Style="border-radius: 0px 0px 45px 45px;" Outlined="false">
    <MudPaper Elevation="0" Class="py-6" Style="background-color: transparent">

    </MudPaper>
</MudPaper>

<MudGrid Class="mt-n15 pt-0">
    <MudItem xs="12">
        <EditForm Model="clubEntity" OnValidSubmit="SubmitClaim">

        <MudCard Elevation="1" Class="rounded-lg py-1">
            <MudCardContent>
                @*
                <MudText Color="Color.Default" Typo="Typo.h6" Style="font-weight: 600;">Sign Up</MudText>
                <MudText Class="mb-5" Typo="Typo.body2">Get started in minutes</MudText> 
                *@

                @if (ShowErrors)
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in Errors!)
                        {
                            <p>@error</p>
                        }
                    </div>
                }

                <div>

                    <MudTextField Class="mt-3" T="string" Label="Club Name" Id="ClubName" @bind-Value="clubEntity.ClubName" Variant="Variant.Filled" Margin="Margin.Dense"
                                    AdornmentColor="Color.Primary" Adornment="Adornment.Start" AdornmentIcon="@Icons.TwoTone.AccountCircle" />
                    <ValidationMessage For="@(() => clubEntity.ClubName)" />

                    <MudTextField Class="mt-3" T="string" Label="Club Registration Number" Id="ClubRegistrationNumber" @bind-Value="clubEntity.ClubRegistrationNumber" Variant="Variant.Filled" Margin="Margin.Dense"
                                    AdornmentColor="Color.Primary" Adornment="Adornment.Start" AdornmentIcon="@Icons.TwoTone.AccountCircle" />
                    <ValidationMessage For="@(() => clubEntity.ClubRegistrationNumber)" />
                        
                    <MudItem>
                        <MudField Label="Associated Provinces" Variant="Variant.Filled" InnerPadding="false" Margin="Margin.Dense"
                                    AdornmentColor="Color.Primary" Adornment="Adornment.Start" AdornmentIcon="@Icons.TwoTone.AccountCircle">
                            <MudRadioGroup Class="mt-3" T="string">

                                <CheckBoxList Data="@provinceList" 
                                    TextField="@((item)=>item.ProvinceName)"
                                    ValueField="@((item)=>item.ProvinceId)" 
                                    SelectedValues="@associatedProvinceList" />

                            </MudRadioGroup>
                        </MudField> 
                    </MudItem>

                    <!-- Dynamic MudTextField Rows -->
                    @if (contactValueList.Any())
                    {
                        @foreach (ContactValue item in contactValueList)
                        {
                            <MudTextField Class="mt-3" T="string" Label="@item.ContactTypeDescription"
                                    Id="@item.ContactTypeId" Variant="Variant.Filled" Margin="Margin.Dense"
                                    AdornmentColor="Color.Primary" Adornment="Adornment.Start" AdornmentIcon="@Icons.TwoTone.AccountCircle"
                                    @bind-Value="@item.ContactDescription"></MudTextField>

                            <!-- Add Contact Button -->
                            <MudButton Class="mt-3" DisableElevation Variant="Variant.Outlined"
                                @onclick="() => AddContactField(item)">+</MudButton>
                        }
                    }

                    <div class="mt-5 d-flex flex-grow-1 gap-4">
                        <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Success" Variant="Variant.Filled" OnClick="SubmitClaim">Submit Claim</MudButton>
                        <MudButton Class="flex-1 rounded-lg" DisableElevation Color="Color.Error" Variant="Variant.Filled" OnClick="CancelClaim">Back to Club Search</MudButton>
                    </div>
                </div>     
            </MudCardContent>
        </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>


 @code {

    [Parameter]
    public string clubEntityJson { get; set; }

    private ClubEntity clubEntity = new ClubEntity();
    private List<Province> provinceList;
    private List<string> associatedProvinceList = new List<string>();
    private List<ContactType> contactTypeList;
    private List<ContactValue> contactValueList;

    private int entityTypeId;

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    public string searchTerm;

    string bindValue;

    protected override void OnInitialized()
    {
        // Call GetAllProvinces() here to load provinces
        GetAllProvinces();

        // Deserialize the JSON string back to ClubEntity
        clubEntity = JsonConvert.DeserializeObject<ClubEntity>(Uri.UnescapeDataString(clubEntityJson));
        
        entityTypeId = (int)Enums.EntityType.Club;

        if (clubEntity.ClubStatusId != (int)Enums.ClubStatus.Listed)
        {
            // Call AssociatedProvinces() here to load selected provinces
            GetAssociatedProvinces();
        }

        // Call GetAllContatTypes() here to load contact types
        GetAllContactTypes();

    }

    private void GetAllProvinces()
    {
        //Get provinces here
        //return await EntityTypeService.GetAllProvinces();

        var responseTask = httpClient.GetStringAsync($"api/Province/GetAll");
        responseTask.Wait(); // Blocking call, which should be used with caution

        if (responseTask.IsCompletedSuccessfully)
        {
            var response = responseTask.Result;
            provinceList = JsonConvert.DeserializeObject<List<Province>>(response);
        }
        else
        {
            throw new Exception("Failed to get response.");
        }
    }
    private void GetAllContactTypes()
    {
        //Get provinces here
        //return await EntityTypeService.GetAllProvinces();

        var responseTask = httpClient.GetStringAsync($"api/ContactType/GetAll");
        responseTask.Wait(); // Blocking call, which should be used with caution

        if (responseTask.IsCompletedSuccessfully)
        {
            var response = responseTask.Result;
            contactTypeList = JsonConvert.DeserializeObject<List<ContactType>>(response);
            contactValueList = contactTypeList.Select(x=> 
                                                      new ContactValue
                                                      {
                                                          ContactTypeId = x.ContactTypeId,
                                                          ContactTypeDescription = x.ContactTypeDescription,
                                                          ContactDescription = ""
                                                      }).ToList();
        }
        else
        {
            throw new Exception("Failed to get response.");
        }
    }
    private void GetAssociatedProvinces()
    {
        var responseTask = httpClient.GetStringAsync($"api/ProvinceEntityRelationship/GetById/{entityTypeId}/{clubEntity.ClubEntityId}");
        responseTask.Wait(); // Blocking call, which should be used with caution

        if (responseTask.IsCompletedSuccessfully)
        {
            var response = responseTask.Result;

            associatedProvinceList = JsonConvert.DeserializeObject<List<string>>(response);        
        }
        else
        {
            throw new Exception("Failed to get response.");
        }
    }

    private void AddContactField(ContactValue item)
    {
        var newContactValue = new ContactValue { ContactTypeId = item.ContactTypeId, ContactTypeDescription = item.ContactTypeDescription, ContactDescription = "" };
        contactValueList.Add(newContactValue);

        // Reorder the list by ContactTypeId
        contactValueList = contactValueList.OrderBy(x => x.ContactTypeId).ToList();
    }

    private async Task SubmitClaim()
    {       
        ShowErrors = false;

        //clubEntity.ClubEntityId = selectedClubEntityId;
        //clubEntity.ClubName = selectedClubName;
        //clubEntity.ClubRegistrationNumber = "";
        clubEntity.ClubStatusId = (int)Enums.ClubStatus.ClaimRequested;
        //clubEntity.ClubStatusReason = "";
        clubEntity.CreatedByUserId = "1";
        //clubEntity.CreateDate = DateTime.Now();
        clubEntity.UpdatedByUserId = "1";
        //clubEntity.UpdateDate = DateTime.Now();

        ClubEntityWithList clubEntityWL = new ClubEntityWithList()
        {
            clubEntity = clubEntity,
            associatedProvinces = associatedProvinceList,
            contactDetails = contactValueList
        };

        var result = "";

        if (clubEntity.ClubEntityId == 0)
        {
            result = await EntityTypeService.AddClubEntity(clubEntityWL);
        }
        else
        {
            result = await EntityTypeService.UpdateClubEntity(clubEntityWL);
        }
        #region error handling section
        if (result == "")
        {
            var options = new DialogOptions() { CloseButton = false, NoHeader = true, MaxWidth = MaxWidth.Large, Position = DialogPosition.BottomCenter };
            var parameters = new DialogParameters();
            var dialog = _dialogService.Show<SuccessBox>("", parameters, options);
        }
        else
        {
            //Errors = "";
            ShowErrors = true;
            _processing = false;
        }
        #endregion 
    }

    private void CancelClaim()
    {
        //Redirect to back to Club Search
        NavigationManager.NavigateTo("/pages/Club/ClubSearch");
    }

    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private bool _processing = false;
    async Task ProcessSomething()
    {
        _processing = true;       
    }
}